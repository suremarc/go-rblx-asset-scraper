// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package assetdelivery

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery(in *jlexer.Lexer, out *Locations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Locations, 0, 2)
			} else {
				*out = Locations{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Location
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery(out *jwriter.Writer, in Locations) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Locations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Locations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Locations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Locations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery(l, v)
}
func easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery1(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "assetFormat":
			out.AssetFormat = string(in.String())
		case "location":
			out.Location = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery1(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"assetFormat\":"
		out.RawString(prefix[1:])
		out.String(string(in.AssetFormat))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery1(l, v)
}
func easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery2(in *jlexer.Lexer, out *ErrorsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "errors":
			(out.Errors).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery2(out *jwriter.Writer, in ErrorsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"errors\":"
		out.RawString(prefix[1:])
		(in.Errors).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery2(l, v)
}
func easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery3(in *jlexer.Lexer, out *Errors) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Errors, 0, 2)
			} else {
				*out = Errors{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 Error
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery3(out *jwriter.Writer, in Errors) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Errors) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Errors) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Errors) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Errors) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery3(l, v)
}
func easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery4(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "customErrorCode":
			out.CustomErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery4(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.CustomErrorCode != 0 {
		const prefix string = ",\"customErrorCode\":"
		out.RawString(prefix)
		out.Int(int(in.CustomErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery4(l, v)
}
func easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery5(in *jlexer.Lexer, out *AssetRequestItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(AssetRequestItems, 0, 2)
			} else {
				*out = AssetRequestItems{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 AssetRequestItem
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery5(out *jwriter.Writer, in AssetRequestItems) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v AssetRequestItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssetRequestItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssetRequestItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssetRequestItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery5(l, v)
}
func easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery6(in *jlexer.Lexer, out *AssetRequestItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requestId":
			out.RequestID = string(in.String())
		case "assetId":
			out.AssetID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery6(out *jwriter.Writer, in AssetRequestItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"requestId\":"
		out.RawString(prefix[1:])
		out.String(string(in.RequestID))
	}
	{
		const prefix string = ",\"assetId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AssetID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AssetRequestItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssetRequestItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssetRequestItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssetRequestItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery6(l, v)
}
func easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery7(in *jlexer.Lexer, out *AssetDescriptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(AssetDescriptions, 0, 0)
			} else {
				*out = AssetDescriptions{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 AssetDescription
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery7(out *jwriter.Writer, in AssetDescriptions) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v AssetDescriptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssetDescriptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssetDescriptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssetDescriptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery7(l, v)
}
func easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery8(in *jlexer.Lexer, out *AssetDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "locations":
			(out.Locations).UnmarshalEasyJSON(in)
		case "errors":
			(out.Errors).UnmarshalEasyJSON(in)
		case "requestId":
			out.RequestID = string(in.String())
		case "IsHashDynamic":
			out.IsHashDynamic = bool(in.Bool())
		case "IsCopyrightProtected":
			out.IsCopyrightProtected = bool(in.Bool())
		case "isArchived":
			out.IsArchived = bool(in.Bool())
		case "assetTypeId":
			out.AssetTypeID = int(in.Int())
		case "assetId":
			out.AssetID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery8(out *jwriter.Writer, in AssetDescription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"locations\":"
		out.RawString(prefix[1:])
		(in.Locations).MarshalEasyJSON(out)
	}
	if len(in.Errors) != 0 {
		const prefix string = ",\"errors\":"
		out.RawString(prefix)
		(in.Errors).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"requestId\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	{
		const prefix string = ",\"IsHashDynamic\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsHashDynamic))
	}
	{
		const prefix string = ",\"IsCopyrightProtected\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCopyrightProtected))
	}
	{
		const prefix string = ",\"isArchived\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsArchived))
	}
	{
		const prefix string = ",\"assetTypeId\":"
		out.RawString(prefix)
		out.Int(int(in.AssetTypeID))
	}
	if in.AssetID != 0 {
		const prefix string = ",\"assetId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AssetID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AssetDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssetDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB54af022EncodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssetDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssetDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB54af022DecodeGithubComSuremarcGoRblxAssetAnalyzerAssetdelivery8(l, v)
}
